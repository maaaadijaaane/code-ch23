{"version":3,"sources":["AppMode.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/FloatingButton.js","components/CreateAccountDialog.js","components/ResetPasswordDialog.js","components/LoginPage.js","components/FeedPage.js","components/ConfirmDeleteBox.js","components/RoundsTable.js","components/RoundForm.js","components/Rounds.js","components/CoursesPage.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","onClick","this","id","src","alt","height","width","title","React","Component","SideMenu","renderModeMenuItems","profilePicURL","displayName","logOut","ModeBar","FloatingButton","handleClick","CreateAccountDialog","checkAccountValidity","state","accountPassword","accountPasswordRepeat","repeatPassRef","current","setCustomValidity","handleNewAccountChange","event","target","name","value","length","setState","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","setDefaultDisplayName","handleCreateAccount","a","preventDefault","url","accountName","accountInfo","password","securityQuestion","accountSecurityQuestion","securityAnswer","accountSecurityAnswer","fetch","headers","method","body","JSON","stringify","res","status","accountCreateStatus","text","resText","newUserRef","createRef","role","cancelCreateAccount","onSubmit","type","size","placeholder","pattern","required","ref","onChange","onBlur","accept","profilePic","rows","cols","maxLength","ResetPasswordDialog","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","loginMsg","msg","accountCreateMsg","showCreateAccountDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","showResetPasswordDialog","githubIcon","githubLabel","focus","htmlFor","style","padding","fontSize","FeedPage","fontStyle","ConfirmDeleteBox","close","deleteRound","RoundsTable","editRound","setEditId","confirmDelete","setDeleteId","showConfirmDelete","hideConfirmDelete","renderTable","table","r","push","key","rounds","date","substring","course","Number","strokes","minutes","seconds","keys","colSpan","hideConfirmDeleteBox","RoundForm","handleChange","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","handleSubmit","faIcon","btnLabel","roundData","saveRound","min","sec","today","Date","now","getTimezoneOffset","toISOString","substr","holes","notes","thisRound","startData","max","disabled","Rounds","addRound","newData","userObj","alert","refreshOnUpdate","editId","_id","deleteId","val","icon","CoursesPage","modeTitle","modeToPage","App","newMode","response","json","obj","parse","handleChangeMode","openMenu","closeMenu","prevState","setUserId","Id","userId","authenticated","then","isAuthenticated","user","ModePage","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1221d5c3.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\r\n\r\nconst AppMode = {\r\n    LOGIN: \"LoginMode\",\r\n    FEED: \"FeedMode\",\r\n    ROUNDS: \"RoundsMode\",\r\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\r\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\r\n    COURSES: \"CoursesMode\"\r\n};\r\n\r\nObject.freeze(AppMode); //This ensures that the object is immutable.\r\n\r\nexport default AppMode;","import React from 'react';\r\nimport AppMode from '../AppMode';\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  getMenuBtnIcon = () => {\r\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \r\n          this.props.mode === AppMode.ROUNDS_EDITROUND)\r\n          return \"fa fa-arrow-left\";\r\n      if (this.props.menuOpen)\r\n        return \"fa fa-times\";\r\n      return \"fa fa-bars\";\r\n  }\r\n\r\n  handleMenuBtnClick = () => {\r\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\r\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\r\n      this.props.changeMode(AppMode.ROUNDS);\r\n    } else if (this.props.mode != AppMode.LOGIN) {\r\n      this.props.toggleMenuOpen();\r\n    }\r\n  }\r\n\r\n    \r\n  render() {\r\n    return (\r\n    <div className=\"navbar\">  \r\n    <span className=\"navbar-items\">\r\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\r\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\r\n        </span>\r\n      </button>\r\n      <img src=\"http://tiny.cc/sslogo\" alt=\"Speed Score Logo\" height=\"38px\"\r\n      width=\"38px\" />\r\n      <span className=\"navbar-title\">\r\n        &nbsp;{this.props.title}\r\n      </span>\r\n    </span>\r\n  </div>\r\n); \r\n}\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js'\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n//renderModeItems -- Renders correct subset of mode menu items based on\r\n//current mode, which is stored in this.prop.mode. Uses switch statement to\r\n//determine mode.\r\nrenderModeMenuItems = () => {\r\n  switch (this.props.mode) {\r\n    case AppMode.FEED:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-users\"></span>&nbsp;Followed Users</a>\r\n        <a className=\"sidemenu-item \">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Feed</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.ROUNDS:\r\n      return(\r\n        <div>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.COURSES:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Add a Course</a>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Courses</a>\r\n        </div>\r\n      );\r\n    default:\r\n        return null;\r\n    }\r\n}\r\n\r\n    render() {\r\n       return (\r\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\r\n             onClick={this.props.toggleMenuOpen}>\r\n          {/* SIDE MENU TITLE */}\r\n          <div className=\"sidemenu-title\">\r\n            <img src={this.props.profilePicURL} height='60' width='60' />\r\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\r\n        </div>\r\n          {/* MENU CONTENT */}\r\n          {this.renderModeMenuItems()}\r\n          {/* The following menu items are present regardless of mode */}\r\n          <a id=\"aboutBtn\" className=\"sidemenu-item\">\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\r\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\r\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\r\n        </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\n\r\nclass ModeBar extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \r\n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\r\n        <a className={(this.props.mode === AppMode.FEED ? \" item-selected\" : null)}\r\n            onClick={()=>this.props.changeMode(AppMode.FEED)}>\r\n          <span className=\"modebaricon fa fa-th-list\"></span>\r\n          <span className=\"modebar-text\">Feed</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.ROUNDS || \r\n               this.props.mode === AppMode.ROUNDS_EDITROUND || \r\n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                  \" item-selected\" : null)}\r\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\r\n          <span className=\"modebar-icon  fa fa-history\"></span>\r\n          <span className=\"modebar-text\">Rounds</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\r\n          <span className=\"modebar-icon  fa fa-flag\"></span>\r\n          <span className=\"modebar-text\">Courses</span>\r\n        </a> \r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default ModeBar;\r\n","import React from 'react';\r\n\r\nclass FloatingButton extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\r\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\r\n        </div>  \r\n      );\r\n    }\r\n}\r\n\r\nexport default FloatingButton;\r\n","import React from 'react';\r\n\r\nclass CreateAccountDialog extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        //Create a ref for the email input DOM element\r\n        this.newUserRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.profilePicRef = React.createRef();\r\n        this.state = {accountName: \"\",\r\n                      displayName: \"\",\r\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                      accountPassword: \"\",\r\n                      accountPasswordRepeat: \"\",\r\n                      accountSecurityQuestion: \"\",\r\n                      accountSecurityAnswer: \"\"};\r\n\r\n    }\r\n\r\n    //checkAccountValidity -- Callback function invoked after a form element in\r\n    //the 'Create Account' dialog box changes and component state has been\r\n    //updated. We need to check whether the passwords match. If they do not, \r\n    //we set a custom validity message to be displayed when the user clicks the\r\n    //'Create Account' button. Otherwise, we reset the custom validity message\r\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n    checkAccountValidity = () => {\r\n        if (this.state.accountPassword != this.state.accountPasswordRepeat) {\r\n            //Passwords don't match\r\n            this.repeatPassRef.current.setCustomValidity(\r\n            \"This password must match original password.\");\r\n        } else {\r\n            this.repeatPassRef.current.setCustomValidity(\"\");\r\n        }\r\n    }\r\n\r\n    //handleNewAccountChange--Called when a field in a dialog box form changes.\r\n    handleNewAccountChange = (event) => {\r\n        if (event.target.name === \"profilePic\") {\r\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\r\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\"});\r\n            } else { //The user selected a file\r\n                const self = this;\r\n                const val = event.target.value;\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n                reader.addEventListener(\"load\",function() {\r\n                    self.setState({profilePicURL: this.result});\r\n                });\r\n            }\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value},this.checkAccountValidity);\r\n        }\r\n    } \r\n\r\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\r\n    //Sets default value of display name to value entered into Email field \r\n    //as a courtesy.\r\n    setDefaultDisplayName = (event) => {\r\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\r\n        this.setState({displayName: event.target.value});\r\n      }\r\n    }\r\n\r\n    //handleCreateAccount -- Triggered when user clicks on \"Create Account\" button.\r\n    //Custom data checking ensures user account under this email does not \r\n    //already exist and that the rest of the info is valid. We create a new  \r\n    // object for user, save it to localStorage and take user to app's \r\n    //landing page. \r\n    handleCreateAccount = async (event) =>{\r\n        event.preventDefault();\r\n        const url = '/users/' + this.state.accountName;\r\n        const accountInfo = {\r\n            displayName: this.state.displayName,\r\n            password: this.state.accountPassword,\r\n            profilePicURL: this.state.profilePicURL,\r\n            securityQuestion: this.state.accountSecurityQuestion,\r\n            securityAnswer: this.state.accountSecurityAnswer,\r\n        };\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(accountInfo)}); \r\n        if (res.status == 200) { //successful account creation!\r\n            this.props.accountCreateStatus(\"New account created! Enter credentials to log in.\");\r\n        } else { //Unsuccessful account creation\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.props.accountCreateStatus(resText);\r\n        }\r\n    }\r\n\r\n    render() {\r\n    return (\r\n    <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n            <center>\r\n            <h3 className=\"modal-title\"><b>Create New Account</b></h3>\r\n            </center>\r\n            <button className=\"close\" \r\n                onClick={this.props.cancelCreateAccount}>\r\n                &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n            <form onSubmit={this.handleCreateAccount}>\r\n            <label>\r\n                Email: \r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountName\"\r\n                type=\"email\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Email Address\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                ref={this.newUserRef}\r\n                value={this.state.accountName}\r\n                onChange={this.handleNewAccountChange}\r\n                onBlur={this.setDefaultDisplayName}\r\n                />\r\n            </label>\r\n            <label>\r\n                Password:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountPassword\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\r\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                required={true}\r\n                value={this.state.accountPassword}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Repeat Password:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountPasswordRepeat\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Repeat Password\"\r\n                required={true}\r\n                ref={this.repeatPassRef}\r\n                value={this.state.accountPasswordRepeat}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Display Name:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"displayName\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Display Name\"\r\n                required={true}\r\n                value={this.state.displayName}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Profile Picture:<br/>\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"profilePic\"\r\n                type=\"file\"\r\n                accept=\"image/x-png,image/gif,image/jpeg\" \r\n                ref={this.profilePicRef}\r\n                value={this.state.profilePic}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n                <img src={this.state.profilePicURL} \r\n                        height=\"60\" width=\"60\" />\r\n            </label> \r\n            <label>\r\n                Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountSecurityQuestion\"\r\n                size=\"35\"\r\n                placeholder=\"Security Question\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.accountSecurityQuestion}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Answer to Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountSecurityAnswer\"\r\n                type=\"text\"\r\n                placeholder=\"Answer\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.accountSecurityAnswer}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <button role=\"submit\" \r\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n                <span className=\"fa fa-user-plus\"></span>&nbsp;Create Account\r\n            </button>\r\n            </form>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    </div>\r\n    );\r\n    }\r\n    }\r\n\r\nexport default CreateAccountDialog;","import React from 'react'\r\n\r\nclass ResetPasswordDialog extends React.Component {\r\n    render() {\r\n        return;\r\n    }\r\n}\r\n\r\nexport default ResetPasswordDialog;","import React from 'react';\r\nimport CreateAccountDialog from './CreateAccountDialog.js';\r\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\r\nimport AppMode from \"./../AppMode.js\";\r\n\r\nclass LoginPage extends React.Component {\r\n\r\nconstructor() {\r\n    super();\r\n    //Create a ref for the email input DOM element\r\n    this.emailInputRef = React.createRef();\r\n    this.passwordInputRef = React.createRef();\r\n    this.state = {accountCreateMsg: \"\",\r\n                  loginBtnIcon: \"fa fa-sign-in\",\r\n                  loginBtnLabel: \"Log In\",\r\n                  showCreateAccountDialog: false,\r\n                  showResetPasswordDialog: false,\r\n                  githubIcon: \"fa fa-github\",\r\n                  githubLabel: \"Sign in with GitHub\",\r\n                  loginMsg: \"\"\r\n                  };\r\n} \r\n    \r\n//Focus cursor in email input field when mounted\r\ncomponentDidMount() {\r\n    this.emailInputRef.current.focus();\r\n}  \r\n\r\n//handleLogin -- Callback function that sets up initial app state upon login.\r\n//handleLogin = () => {\r\n    //Stop spinner\r\n//    this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n //                  loginBtnLabel: \"Log In\"});\r\n    //Set current user\r\n    //this.props.setUserId(this.emailInputRef.current.value);\r\n    //Trigger switch to FEED mode (default app landing page)\r\n    //this.props.changeMode(AppMode.FEED);\r\n//}\r\n\r\n\r\n//handleLoginSubmit -- Called when user clicks on login button.\r\nhandleLoginSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                   loginBtnLabel: \"Logging In...\"});\r\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\r\n                \"&password=\" + this.passwordInputRef.current.value;\r\n    const res = await fetch(url, {method: 'POST'}); \r\n    if (res.status == 200) { //successful login!\r\n        window.open(\"/\",\"_self\");\r\n    } else { //Unsuccessful login\r\n      const resText = await res.text();\r\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                     loginBtnLabel: \"Log In\",\r\n                     loginMsg: resText});\r\n    }\r\n}\r\n\r\n  //accountCreateStatus -- Called by child CreateAccountDialog component when \r\n  //user attempted to create new account. Hide the dialog and display \r\n  //a message indicating result of the attempt.\r\n  accountCreateStatus = (msg) => {\r\n      this.setState({accountCreateMsg: msg,\r\n                     showCreateAccountDialog: false});\r\n  }\r\n\r\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\r\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\r\n  cancelCreateAccount = () => {\r\n      this.setState({showCreateAccountDialog: false});\r\n  }\r\n\r\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\r\n//provider\r\nhandleOAuthLogin = (provider) => {\r\n    window.open(`/auth/${provider}`,\"_self\");\r\n}\r\n\r\n//handleOAuthLoginClick -- Called whent the user clicks on button to\r\n//authenticate via a third-party OAuth service. The name of the provider is\r\n//passed in as a parameter.\r\nhandleOAuthLoginClick = (provider) => {\r\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\r\n                  [provider + \"Label\"] : \"Connecting...\"});\r\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\r\n}\r\n\r\n\r\n  render() {\r\n    return(\r\n        <div id=\"login-mode-div\" className=\"padded-page\">\r\n        <center>\r\n            <h1 />\r\n            {this.state.accountCreateMsg != \"\" ? <p className=\"emphasis\">{this.state.accountCreateMsg}</p> : null}\r\n            {this.state.loginMsg != \"\" ? <p className=\"emphasis\">{this.state.loginMsg}</p> : null}\r\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\r\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Email:\r\n                <input\r\n                ref={this.emailInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"email\"\r\n                placeholder=\"Enter Email Address\"\r\n                id=\"emailInput\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p />\r\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Password:\r\n                <input\r\n                ref={this.passwordInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n            <button\r\n                type=\"submit\"\r\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\r\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\r\n                &nbsp;{this.state.loginBtnLabel}\r\n            </button>\r\n            <p>\r\n            <button type=\"button\" className=\"btn btn-link login-link\" \r\n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\r\n                Create an account</button> | \r\n                <button type=\"button\" className=\"btn btn-link login-link\"\r\n                        onClick={() => {this.setState({showResetPasswordDialog: true});}}>\r\n                Reset your password</button>\r\n            </p>  \r\n            <button type=\"button\" className=\"btn btn-github\"\r\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\r\n              <span className={this.state.githubIcon}></span>&nbsp;\r\n                {this.state.githubLabel}\r\n            </button>\r\n            <p>\r\n                <i>Version CptS 489</i>\r\n            </p>\r\n            </form>\r\n            {this.state.showCreateAccountDialog ? \r\n              <CreateAccountDialog \r\n                accountCreateStatus={this.accountCreateStatus}\r\n                cancelCreateAccount={this.cancelCreateAccount} /> : null}\r\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\r\n        </center>\r\n        </div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default LoginPage;\r\n","import React from 'react';\r\n\r\nclass FeedPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >Activity Feed</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://dl.dropboxusercontent.com/s/qpjhy9x9gwdxpob/SpeedScoreLogo64Trans.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default FeedPage;","import React from 'react';\r\n\r\nclass ConfirmDeleteBox extends React.Component {\r\n    render(){\r\n        return(\r\n            <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <center>\r\n                            <h3 className=\"modal-title\"><b>Confirm Deletion</b></h3>\r\n                        </center>\r\n                        <button id=\"modalClose\" className=\"close\" onClick={this.props.close}>\r\n                            &times;</button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <center>\r\n                            <p>Do you really want to delete this round?</p>\r\n                        </center>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\r\n                            Yes, Delete</button>\r\n                        <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                            No, Cancel</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default ConfirmDeleteBox;","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport ConfirmDeleteBox from \"./ConfirmDeleteBox.js\" \r\n\r\nclass RoundsTable extends React.Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {showConfirmDelete: false}\r\n  }\r\n\r\n  //editRound -- Triggered when the user clicks the edit button for a given\r\n  //round. The id param is the unique property that identifies the round.\r\n  //Set the state variable representing the id of the round to be edited and\r\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\r\n  //chosen round.\r\n  editRound = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n  }\r\n\r\n  //confirmDelete -- Triggered when the user clicks the delete button\r\n  //for a given round. The id paam is the unique property that \r\n  //identifies the round. Set the state variable representing the id\r\n  //of the round to be deleted and then present a dialog box asking\r\n  //the user to confirm the deletion.\r\n  //TO DO: Implement the confirmation dialog box. For now, we\r\n  //present alert box placeholder\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    this.setState({showConfirmDelete: true})\r\n  }\r\n\r\n  deleteRound = () => {\r\n    this.props.deleteRound();\r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n\r\n  hideConfirmDelete = () => {\r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n\r\n\r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n  renderTable = () => {\r\n  let table = [];\r\n  for (let r = 0; r < this.props.rounds.length; ++r) {\r\n    table.push(\r\n      <tr key={r}>\r\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\r\n        <td>{this.props.rounds[r].course}</td>\r\n        <td>{(Number(this.props.rounds[r].strokes) + \r\n              Number(this.props.rounds[r].minutes)) +\r\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \" (\" + \r\n              this.props.rounds[r].strokes + \r\n              \" in \" + this.props.rounds[r].minutes + \":\" + \r\n              (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \")\"}\r\n        </td>\r\n        <td><button onClick={this.props.menuOpen ? null : () => \r\n          this.editRound(r)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n        <td><button onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDelete(r)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n      </tr> \r\n    );\r\n  }\r\n  return table;\r\n  }\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Course</th>\r\n          <th>Score</th>\r\n          <th>View/Edit...</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(this.props.rounds).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\r\n          </tr> : this.renderTable()\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {this.state.showConfirmDelete ?\r\n        <ConfirmDeleteBox\r\n          close={this.hideConfirmDeleteBox}\r\n          deleteRound={this.deleteRound} /> : null}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoundsTable;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundForm extends React.Component {\r\n  constructor(props) {\r\n  super(props);\r\n  //Create date object for today, taking time zone into consideration\r\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n  //store date as ISO string\r\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\r\n    //If logging a new round, the starting state is a default round with\r\n    //today's date.\r\n    this.state = {date:  today.toISOString().substr(0,10), \r\n                  course: \"\",\r\n                  type: \"practice\",\r\n                  holes: \"18\",\r\n                  strokes: 80,\r\n                  minutes: 50,\r\n                  seconds: \"00\",\r\n                  notes: \"\",\r\n                  faIcon: \"fa fa-save\",\r\n                  btnLabel: \"Save Round Data\"}\r\n  } else {\r\n    //if editing an existing round, the starting state is the round's\r\n    //current data\r\n    let thisRound = {...this.props.startData};\r\n    delete thisRound.id;\r\n    thisRound.faIcon = \"fa fa-edit\";\r\n    thisRound.btnLabel = \"Update Round Data\";\r\n    this.state = thisRound;\r\n  }\r\n}\r\n  \r\n  \r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        if (name === \"seconds\") {\r\n          let newSec = (event.target.value.length < 2 ? \"0\" + \r\n            event.target.value : event.target.value);\r\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \r\n                                       newSec);\r\n          this.setState({seconds: newSec, SGS: newSGS});\r\n        } else if (name === \"strokes\") {\r\n          let newStrokes = event.target.value;\r\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \r\n            this.state.seconds);\r\n          this.setState({strokes: newStrokes, SGS: newSGS});\r\n        } else if (name === \"minutes\") {\r\n            let newMin = event.target.value;\r\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \r\n              this.state.seconds);\r\n            this.setState({minutes: newMin, SGS: newSGS});\r\n        } else {\r\n          this.setState({[name]: event.target.value});\r\n        }\r\n    }\r\n  \r\n  \r\n    //handleSubmit -- When the user clicks on the button to save/update the\r\n    //round, start the spinner and invoke the parent component's saveRound\r\n    //method to do the actual work. Note that saveRound is set to the correct\r\n    //parent method based on whether the user is logging a new round or editing\r\n    //an existing round.\r\n    handleSubmit = (event) => {\r\n        //start spinner\r\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\r\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                                    \"Saving...\" : \"Updating...\")});\r\n        //Prepare current round data to be saved\r\n        let roundData = this.state;\r\n        delete roundData.faIcon;\r\n        delete roundData.btnLabel;\r\n        //call saveRound on 1 second delay to show spinning icon\r\n        setTimeout(this.props.saveRound,1000,roundData); \r\n        event.preventDefault(); \r\n        }\r\n  \r\n\r\n    computeSGS = (strokes, min, sec) => {\r\n      return (Number(strokes) + Number(min)) \r\n                  + \":\" + sec;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\r\n          <center>\r\n            <label>\r\n              Date:\r\n              <input name=\"date\" className=\"form-control form-center\" \r\n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\r\n            </label>\r\n            <p></p>\r\n            <label>\r\n              Course:\r\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.course} onChange={this.handleChange}\r\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n          <p></p>\r\n          <label>Type:\r\n          <select name=\"type\" value={this.state.type} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"practice\">Practice</option>\r\n            <option value=\"tournament\">Tournament</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Holes:\r\n          <select name=\"holes\" value={this.state.holes} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"9\">9</option>\r\n            <option value=\"18\">18</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Strokes:\r\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \r\n            min=\"9\" max=\"200\" value={this.state.strokes} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Time: <br></br>\r\n          <input name=\"minutes\" type=\"number\" size=\"3\"\r\n            min=\"10\" max=\"400\" value={this.state.minutes}\r\n            onChange={this.handleChange} />:  \r\n          <input name=\"seconds\" type=\"number\" size=\"2\"\r\n            min=\"0\" max=\"60\" value={this.state.seconds} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Speedgolf Score: <br></br>\r\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \r\n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\r\n          </label>\r\n          <p></p>\r\n          <label>Notes:\r\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                placeholder=\"Enter round notes\" value={this.state.notes} \r\n                onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <p></p>\r\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n            className=\"btn btn-primary btn-color-theme\">\r\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\r\n          </button>\r\n          </center>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default RoundForm;","//Rounds -- A parent component for the app's \"rounds\" mode.\r\n//Manages the rounds data for the current user and conditionally renders the\r\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\r\n\r\nimport React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport RoundsTable from './RoundsTable.js';\r\nimport RoundForm from './RoundForm.js';\r\nimport FloatingButton from './FloatingButton.js';\r\n\r\nclass Rounds extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.state = {deleteId: \"\",\r\n                      editId: \"\"};           \r\n    }\r\n\r\n    //componentDidMount -- After the component moutns, obtain current user's \r\n    //rounds from the server and push them into component state\r\n    // componentDidMount = async () => {\r\n    //     let url = \"/rounds/\" + this.props.userObj.id;\r\n    //     let res = await fetch(url, {method: 'GET'});\r\n    //     if (res.status != 200) {\r\n    //         let msg = await res.text();\r\n    //         alert(\"There was an error obtaining rounds data for this user: \" \r\n    //         + msg);\r\n    //         return;\r\n    //     } \r\n    //     let body = await res.json();\r\n    //     body = JSON.parse(body);\r\n    //     alert(\"in componentDidMount with GET results: \" + body);\r\n    //     this.setState({rounds: body}, this.props.changeMode(AppMode.ROUNDS));\r\n    // }\r\n\r\n    //addRound -- Given an object newData containing a new round, use the \r\n    //server POST route to add the new round to the database. If the add is\r\n    //successful, call on the refreshOnUpdate() method to force the parent\r\n    //App component to refresh its state from the database and re-render itself,\r\n    //allowing the change to be propagated to the Rounds table. Then switch\r\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\r\n    addRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            alert(\"An error occurred when attempting to add new round to database: \"    \r\n            + msg);\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n    //editRound -- Given an object newData containing updated data on an\r\n    //existing round, update the current user's round in the database. \r\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\r\n    //round. \r\n    editRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.state.editId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            alert(\"An error occurred when attempting to add new round to database: \" \r\n            + msg);\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n\r\n    //deleteRound -- Delete the current user's round uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteRound = async () => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.state.deleteId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify()}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            alert(\"An error occurred when attempting to add new round to database: \" \r\n            + msg);\r\n            this.props.changeMode(AppMode.ROUNDS)\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n \r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.setState({deleteId: val});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.setState({editId: val});\r\n    }\r\n    \r\n    //render -- Conditionally render the Rounds mode page as either the rounds\r\n    //table, the rounds form set to obtain a new round, or the rounds form set\r\n    //to edit an existing round.\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.ROUNDS:\r\n                return (\r\n                    <>\r\n                    <RoundsTable \r\n                        rounds={this.props.userObj.rounds}\r\n                        setEditId={this.setEditId}\r\n                        setDeleteId={this.setDeleteId}\r\n                        deleteRound={this.deleteRound}\r\n                        changeMode={this.props.changeMode}\r\n                        menuOpen={this.props.menuOpen} /> \r\n                    <FloatingButton\r\n                        handleClick={() => \r\n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\r\n                        menuOpen={this.props.menuOpen}\r\n                        icon={\"fa fa-plus\"} />\r\n                    </>\r\n                );\r\n            case AppMode.ROUNDS_LOGROUND:\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={\"\"} \r\n                        saveRound={this.addRound} />\r\n                );\r\n            case AppMode.ROUNDS_EDITROUND:\r\n                let thisRound = {...this.props.userObj.rounds[this.state.editId]};\r\n                thisRound.date = thisRound.date.substr(0,10);\r\n                if (thisRound.seconds < 10) {\r\n                    thisRound.seconds = \"0\" + thisRound.seconds;\r\n                } \r\n                delete thisRound.SGS;\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={thisRound} \r\n                        saveRound={this.editRound} />\r\n                );\r\n        }\r\n    }\r\n\r\n}   \r\n\r\nexport default Rounds;\r\n","import React from 'react';\r\n\r\nclass CoursesPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >Courses</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://dl.dropboxusercontent.com/s/qpjhy9x9gwdxpob/SpeedScoreLogo64Trans.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default CoursesPage;","import React from 'react';\r\nimport NavBar from './NavBar.js';\r\nimport SideMenu from './SideMenu.js';\r\nimport ModeBar from './ModeBar.js';\r\nimport FloatingButton from './FloatingButton.js';\r\nimport LoginPage from './LoginPage.js';\r\nimport AppMode from \"./../AppMode.js\"\r\nimport FeedPage from './FeedPage.js';\r\nimport Rounds from './Rounds.js';\r\nimport CoursesPage from './CoursesPage.js';\r\n\r\nconst modeTitle = {};\r\nmodeTitle[AppMode.LOGIN] = \"Welcome to SpeedScore\";\r\nmodeTitle[AppMode.FEED] = \"Activity Feed\";\r\nmodeTitle[AppMode.ROUNDS] = \"My Rounds\";\r\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Log New Round\";\r\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Round\";\r\nmodeTitle[AppMode.COURSES] = \"Courses\";\r\n\r\nconst modeToPage = {};\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\nmodeToPage[AppMode.FEED] = FeedPage;\r\nmodeToPage[AppMode.ROUNDS] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\r\nmodeToPage[AppMode.COURSES] = CoursesPage;\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {mode: AppMode.LOGIN,\r\n                  menuOpen: false,\r\n                  authenticated: false,\r\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\r\n                 };\r\n  }\r\n\r\n  //componentDidMount\r\n  componentDidMount() {\r\n    if (!this.state.authenticated) { \r\n      //Use /auth/test route to (re)-test authentication and obtain user data\r\n      fetch(\"/auth/test\")\r\n        .then((response) => response.json())\r\n        .then((obj) => {\r\n          if (obj.isAuthenticated) {\r\n            this.setState({\r\n              userObj: obj.user,\r\n              authenticated: true,\r\n              mode: AppMode.FEED //We're authenticated so can get into the app.\r\n            });\r\n          }\r\n        }\r\n      )\r\n    } \r\n  }\r\n\r\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \r\n  //the database. The function calls the users/:userid (GET) route to update \r\n  //the userObj state var based on the latest database changes, and sets the \r\n  //mode state var is set to newMode. After this method is called, the\r\n  //App will re-render itself, forcing the new data to \r\n  //propagate to the child components when they are re-rendered.\r\n  refreshOnUpdate = async(newMode) => {\r\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\r\n    response = await response.json();\r\n    const obj = JSON.parse(response);\r\n    this.setState({\r\n      userObj: obj,\r\n      mode: newMode\r\n    });\r\n  }\r\n\r\n\r\n  handleChangeMode = (newMode) => {\r\n    this.setState({mode: newMode});\r\n  }\r\n\r\n  openMenu = () => {\r\n    this.setState({menuOpen : true});\r\n  }\r\n  \r\n  closeMenu = () => {\r\n    this.setState({menuOpen : false});\r\n  }\r\n\r\n  toggleMenuOpen = () => {\r\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\r\n  }\r\n\r\n  setUserId = (Id) => {\r\n    this.setState({userId: Id,\r\n                   authenticated: true});\r\n  }\r\n\r\n\r\n  render() {\r\n    const ModePage = modeToPage[this.state.mode];\r\n    return (\r\n      <div>\r\n        <NavBar \r\n          title={modeTitle[this.state.mode]} \r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          toggleMenuOpen={this.toggleMenuOpen}/>\r\n          <SideMenu \r\n            menuOpen = {this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            toggleMenuOpen={this.toggleMenuOpen}\r\n            displayName={this.state.userObj.displayName}\r\n            profilePicURL={this.state.userObj.profilePicURL}\r\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}/>\r\n          <ModeBar \r\n            mode={this.state.mode} \r\n            changeMode={this.handleChangeMode}\r\n            menuOpen={this.state.menuOpen}/>\r\n          <ModePage \r\n            menuOpen={this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            changeMode={this.handleChangeMode}\r\n            userObj={this.state.userObj}\r\n            refreshOnUpdate={this.refreshOnUpdate}/>\r\n      </div>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './styles/index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}